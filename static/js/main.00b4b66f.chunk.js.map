{"version":3,"sources":["js/reducers/index.js","js/sagas/api-saga.js","js/store/index.js","js/components/AddressList.js","js/components/CustomerAddressDetails.js","js/components/Customers.js","js/actions/index.js","App.js","index.js"],"names":["initialState","customerList","customerAddress","rootReducer","state","action","type","console","log","payload","Object","assign","watchGetAllCustomers","watchGetAddressDetail","workerSagaCustomerList","workerSagaAddress","root","takeEvery","call","getData","put","selectedCustomer","id","getAddress","axios","get","then","response","data","Error","all","fork","initialiseSagaMiddleware","createSagaMiddleware","store","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","run","apiSaga","AddressList","props","count","addressListItem","addressList","map","item","key","address","city","country","className","Address","connect","customerAddressDetail","addressDetail","name","Customers","this","getCustomerList","length","customer","onClick","getCustomerAddress","email","phone","age","sex","CustomerAddressDetails","Component","App","basename","process","src","alt","exact","path","render","to","component","document","getElementById"],"mappings":"+OAEMA,EAAe,CACnBC,aAAc,GACdC,gBAAiB,IAoBJC,MAjBf,WAAoD,IAA/BC,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCAEjD,MAAoB,4BAAhBA,EAAOC,MACTC,QAAQC,IAAI,0BAA0BH,EAAOI,SACtCC,OAAOC,OAAO,GAAIP,EAAO,CAC9BF,gBAAiBG,EAAOI,WAGR,yBAAhBJ,EAAOC,KAEFI,OAAOC,OAAO,GAAIP,EAAO,CAC9BH,aAAcI,EAAOI,UAGlBL,G,+DChBSQ,G,WAMDC,G,WAOCC,G,WAYDC,G,WAqCQC,GA9DjB,SAAUJ,IAAV,iEAEN,OADAL,QAAQC,IAAI,qBADN,SAEAS,YAAU,oBAAqBH,GAF/B,uCAMD,SAAUD,EAAsBR,GAAhC,iEAIL,OAHFE,QAAQC,IAAI,8CADL,SAICS,YAAU,uBAAwBF,GAJnC,uCAOC,SAAUD,IAAV,uEAGY,OAFlBP,QAAQC,IAAI,0BADN,kBAGkBU,YAAKC,GAHvB,OAKJ,OAFMV,EAHF,OAIJF,QAAQC,IAAIC,GAJR,SAKEW,YAAI,CAAEd,KAAM,uBAAwBG,YALtC,+BAOJ,OAPI,oCAOEW,YAAI,CAAEd,KAAM,cAAeG,QAAQ,EAAD,KAPpC,sDAYD,SAAUM,EAAkBV,GAA5B,yEAQa,OAPlBE,QAAQC,IAAI,oBAAoBH,GAC7BA,GAAQA,EAAOI,SAChBF,QAAQC,IAAIH,EAAOI,QAAQY,kBACzBC,EAAGjB,GAAQA,EAAOI,QAAQJ,EAAOI,QAAQY,kBAAkB,EAJ1D,kBAQmBH,YAAKK,EAAWD,GARnC,OASH,OADMb,EARH,gBASGW,YAAI,CAAEd,KAAM,0BAA2BG,YAT1C,+BAYH,OAZG,oCAYGW,YAAI,CAAEd,KAAM,cAAeG,QAAQ,EAAD,KAZrC,sDAiBP,SAASc,EAAWD,GAGhB,GAFFf,QAAQC,IAAI,oCAAoCc,GAE3CA,EAEH,OADCf,QAAQC,IAAI,YAAYc,GACjBE,IAAMC,IAAI,6BAA6BH,EAAG,SAASI,MAAK,SAAAC,GAAQ,OAAEA,EAASC,QAGnF,MAAM,IAAIC,MAAM,cAIpB,SAASV,IAET,OADAZ,QAAQC,IAAI,qBACJgB,IAAMC,IAAI,uCAAuCC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,QAMrE,SAAUZ,IAAV,iEACb,OADa,SACPc,YAAI,CAACC,YAAKnB,GACdmB,YAAKlB,GACLkB,YAAKjB,GACLiB,YAAKhB,KAJM,uCC9Df,IAAMiB,EAA2BC,cAI3BC,GAFiBC,OAAOC,sCAAwCC,IAExDC,YACZnC,EAEEoC,YAAiBP,KAIrBA,EAAyBQ,IAAIC,GAEdP,Q,wCCLAQ,MAZf,SAAqBC,GACpB,IAAIC,EAAM,EACHC,EAAgBF,EAAMG,YAAYC,KAAI,SAACC,GAEvC,OADLJ,GAAY,EACE,wBAAIK,IAAKL,EAAMI,EAAKE,SAAUF,EAAKE,QAAnC,KAA8CF,EAAKG,KAAnD,KACLH,EAAK5C,MADA,KACS4C,EAAKI,YAI5B,OAAQ,wBAAIC,UAAU,aAAaR,ICGtC,IAyBeS,EAFCC,aA9BhB,SAAyBnD,GACvB,MAAO,CACLoD,sBAAuBpD,EAAMF,mBA4BjBqD,EAvBc,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,sBAG7B,OADJjD,QAAQC,IAAI,iCAA8BgD,GAChCA,GAAyBA,EAAsBC,cAG7C,yBAAKJ,UAAU,QAEnB,yBAAKA,UAAU,UAAf,WAGA,yBAAKA,UAAU,SACdG,EAAsBE,MAEvB,6BACE,kBAAC,EAAD,CAAaZ,YAAaU,EAAsBC,kBAV7C,iCCXCE,EAAd,YAEE,WAAYhB,GAAQ,qEACZA,IAHV,iFASIiB,KAAKjB,MAAMkB,oBATf,+BAeY,IAAD,OAIP,OAHAtD,QAAQC,IAAI,2BAA2BoD,KAAKjB,MAAM1C,cAG7C2D,KAAKjB,MAAM1C,aAAa6D,OAGrB,yBAAKT,UAAU,aACrB,yBAAKA,UAAU,SAGXO,KAAKjB,MAAM1C,aAAa8C,KAAI,SAAAgB,GAAQ,OAAI,yBAAKV,UAAU,OAAQJ,IAAKc,EAASL,KAC7EM,QAAS,kBAAM,EAAKrB,MAAMsB,mBAAmB,CAAC5C,iBAAkB0C,EAASzC,OACvE,yBAAK+B,UAAU,UACZU,EAASL,MAEZ,6BACE,qCAAWK,EAASG,MAApB,aAAqCH,EAASI,MAA9C,UACMJ,EAASK,IADf,UAC2BL,EAASM,IADpC,WAQR,yBAAKhB,UAAU,SAEhB,kBAACiB,EAAD,QAtBS,+CApBd,GAAgCC,aAyDjBhB,mBANf,SAAyBnD,GACvB,MAAO,CACLH,aAAcG,EAAMH,gBAMtB,CAAE4D,gBC5DG,WACL,MAAO,CAAEvD,KAAM,sBD2DG2D,mBCxDb,SAA4B3C,GACjC,MAAO,CAAEhB,KAAM,uBAAuBG,QAAQa,KDqDjCiC,CAGbI,G,gBEtCaa,G,uLApBX,OADAjE,QAAQC,IAAI,6BAGV,kBAAC,IAAD,CAAQiE,SAAUC,qBAChB,yBAAKrB,UAAU,OACf,4BAAQA,UAAU,cAChB,yBAAKsB,IAAI,8BAA8BtB,UAAU,WAAWuB,IAAI,SAChE,wBAAIvB,UAAU,aAAd,6BAEA,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAM,IAAIC,OAAQ,kBAC7B,kBAAC,IAAD,CAAUC,GAAG,qBAEd,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,gBAAgBG,UAAWtB,W,GAf5CY,cCElBQ,iBACE,kBAAC,IAAD,CAAU7C,MAAOA,GACf,kBAAC,EAAD,OAEHgD,SAASC,eAAe,W","file":"static/js/main.00b4b66f.chunk.js","sourcesContent":["import { ADD_ARTICLE } from \"../constants/action-types\";\n\nconst initialState = {\n  customerList: [],\n  customerAddress: {}\n};\n\nfunction rootReducer(state = initialState, action) {\n  \n  if (action.type === \"CUSTOMER_ADDRESS_LOADED\") {\n    console.log(\"CUSTOMER_ADDRESS_LOADED\",action.payload);\n    return Object.assign({}, state, {\n      customerAddress: action.payload\n    });\n  }\n  if (action.type === \"CUSTOMER_LIST_LOADED\") {\n   \n    return Object.assign({}, state, {\n      customerList: action.payload\n    });\n  }\n  return state;\n}\n\nexport default rootReducer;\n","\n\nimport { take,put, call, fork, select, takeEvery, all } from 'redux-saga/effects'\nimport axios from 'axios'\nimport * as actions from '../actions'\n export function* watchGetAllCustomers() {\n  console.log(\"GET_CUSTOMER_LIST\");\n  yield takeEvery(\"GET_CUSTOMER_LIST\", workerSagaCustomerList);\n  \n}\n\nexport function* watchGetAddressDetail(action) {\nconsole.log(\"GET_CUSTOMER_ADDRESS watchGetAddressDetail\");\n\n\n  yield takeEvery(\"GET_CUSTOMER_ADDRESS\", workerSagaAddress);\n\n}\n export function* workerSagaCustomerList() {\n  console.log(\"workerSagaCustomerList\");\n  try {\n    const payload = yield call(getData);\n    console.log(payload);\n    yield put({ type: \"CUSTOMER_LIST_LOADED\", payload });\n  } catch (e) {\n    yield put({ type: \"API_ERRORED\", payload: e });\n  }\n}\n\n\nexport function* workerSagaAddress(action) {\n  console.log(\"workerSagaAddress\",action);\n  if(action&&action.payload)\n    console.log(action.payload.selectedCustomer);\n  let id=action&&action.payload?action.payload.selectedCustomer:-1;\n \n  try {\n\n    const payload = yield call(getAddress,id);\n    yield put({ type: \"CUSTOMER_ADDRESS_LOADED\", payload });\n  } catch (e) {\n    \n    yield put({ type: \"API_ERRORED\", payload: e });\n  }\n}\n\n\nfunction getAddress(id){\n  console.log(\"getAddress is claled in side saga\",id);\n  \n    if(id){\n     console.log(\"id inside\",id)\n    return  axios.get('assets/samplejson/customer'+id+'.json').then(response=>response.data);\n     }\n  else {\n    throw new Error(\"invalid id\");\n  }\n\n}\nfunction getData() {\nconsole.log(\"data fetch called\")\nreturn  axios.get('assets/samplejson/customerlist.json').then(response =>  response.data)\n\n \n}\n\n\nexport default function* root() {\n  yield all([fork(watchGetAllCustomers), \n    fork(watchGetAddressDetail),\n    fork(workerSagaCustomerList),\n    fork(workerSagaAddress)])\n}\n\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport createSagaMiddleware from \"redux-saga\";\nimport apiSaga from \"../sagas/api-saga\";\n\nconst initialiseSagaMiddleware = createSagaMiddleware();\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  \n    applyMiddleware( initialiseSagaMiddleware)\n  \n);\n\ninitialiseSagaMiddleware.run(apiSaga);\n\nexport default store;\n","import React from 'react';\nfunction AddressList(props){\n\tlet count=1;\n    let addressListItem=props.addressList.map((item)=>{\n\t \tcount=count+1;\n        return  (<li key={count+item.address}>{item.address}, {item.city}\n        \t, {item.state}, {item.country}</li> )\n        \t\n    });\n\n   return (<ul className=\"numbering\">{addressListItem}</ul>);\n\t}\n\nexport default AddressList;\n","import React, {Component} from 'react';\nimport Panel from 'react-bootstrap/lib/Panel'\nimport AddressList from './AddressList';\nimport { connect } from \"react-redux\";\n\n\nfunction mapStateToProps(state) {\n  return {\n    customerAddressDetail: state.customerAddress\n  };\n}\n\n//This Component is a child Component of Customers Component\nconst CustomerAddressDetail = ({ customerAddressDetail }) => {\n\nconsole.log(\"CustomerAddressDetail r--->\",customerAddressDetail);\n    if (!(customerAddressDetail && customerAddressDetail.addressDetail)\n      )\n      return(<div/>);\n    return (<div className=\"card\">\n      \n        <div className=\"header\">\n          Address \n        </div>\n        <div className=\"title\">\n        {customerAddressDetail.name}\n        </div>\n        <div>\n          <AddressList addressList={customerAddressDetail.addressDetail} />\n       </div>\n     \n    </div>\n    )\n  }\n  \n\nconst Address = connect(mapStateToProps)(CustomerAddressDetail);\n\nexport default Address;\n\n\n\n\n","import React, {Component} from 'react';\n\nimport CustomerAddressDetails from './CustomerAddressDetails'\nimport { connect } from \"react-redux\";\nimport { getCustomerList,getCustomerAddress} from \"../actions/index\";\n//import axios from 'axios'\n\nexport  class Customers extends Component {\n\n  constructor(props) {\n    super(props)\n    \n  }\n\n  //function which is called the first time the component loads\n  componentDidMount() {\n    this.props.getCustomerList();\n    //this.getCustomerData();\n  }\n\n  \n\n  render() {\n    console.log(\"Customers List in render\",this.props.customerList);\n\n    \n    if (!this.props.customerList.length)\n      return (<p>Loading data</p>)\n\n    return (<div className=\"addmargin\">\n      <div className=\"col-1\" >\n        {\n\n          this.props.customerList.map(customer => <div className=\"card\"  key={customer.name} \n          onClick={() => this.props.getCustomerAddress({selectedCustomer: customer.id})}>\n            <div className=\"header\">\n              {customer.name}\n            </div>\n            <div>\n              <p>Email: {customer.email}, mobile: {customer.phone}, \n              Age: {customer.age}, Sex: {customer.sex} </p>\n              \n            </div>\n          </div>)\n        }\n      </div>\n\n      <div className=\"col-2\">\n     \n     <CustomerAddressDetails/>\n      </div>\n      \n    </div>)\n  }\n\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    customerList: state.customerList\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  { getCustomerList,getCustomerAddress }\n)(Customers);\n","import { ADD_ARTICLE } from \"../constants/action-types\";\n\nexport function addArticle(payload) {\n  return { type: ADD_ARTICLE, payload };\n}\n\nexport function getCustomerList() {\n  return { type: \"GET_CUSTOMER_LIST\"};\n}\n\nexport function getCustomerAddress(id) {\n  return { type: \"GET_CUSTOMER_ADDRESS\",payload:id};\n}\n\n\n\n\n","\nimport React, { Component } from 'react';\nimport Customers from \"./js/components/Customers\";\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    console.log(\"Host URL\"+process.env.PUBLIC_URL);\n    return (\n\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <img src=\"./assets/images/conviva.png\" className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">ConViva Customer Portal </h1>\n        </header>\n          <Switch>\n                <Route exact path= \"/\" render={() => (\n                  <Redirect to=\"/customerlist\"/>\n                )}/>\n                 <Route exact path='/customerlist' component={Customers} />\n          </Switch>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./js/store/index\";\nimport App from \"./App.js\";\n\n\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n document.getElementById(\"root\")\n);\n"],"sourceRoot":""}