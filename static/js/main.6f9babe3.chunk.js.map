{"version":3,"sources":["js/constants/action-types.js","js/reducers/index.js","js/sagas/api-saga.js","js/store/index.js","js/components/AddressList.js","js/components/CustomerAddressDetails.js","js/components/Customers.js","js/actions/index.js","App.js","index.js"],"names":["initialState","customerList","customerAddress","rootReducer","state","action","type","Object","assign","payload","watchGetAllCustomers","watchGetAddressDetail","workerSagaCustomerList","workerSagaAddress","root","takeEvery","call","getData","put","id","selectedCustomer","getAddress","axios","get","then","response","data","Error","all","fork","initialiseSagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","apiSaga","AddressList","props","count","addressListItem","addressList","map","item","key","address","city","country","className","Address","connect","customerAddressDetail","addressDetail","name","Customers","Component","constructor","super","componentDidMount","this","getCustomerList","render","length","customer","onClick","getCustomerAddress","email","phone","age","sex","CustomerAddressDetails","App","basename","src","alt","exact","path","to","component","document","getElementById"],"mappings":"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","file":"static/js/main.6f9babe3.chunk.js","sourcesContent":["export const GET_CUSTOMER_ADDRESS = \"GET_CUSTOMER_ADDRESS\";\nexport const GET_CUSTOMER_LIST = \"GET_CUSTOMER_LIST\";\nexport const CUSTOMER_ADDRESS_LOADED = \"CUSTOMER_ADDRESS_LOADED\";\nexport const CUSTOMER_LIST_LOADED = \"CUSTOMER_LIST_LOADED\";\nexport const CUSTOMER_ADDRESS_LOAD_ERROR=\"CUSTOMER_ADDRESS_LOAD_ERROR\";\nexport const CUSTOMER_LIST_LOAD_ERROR=\"CUSTOMER_LIST_LOAD_ERROR\";\nexport const CUSTOMER_INVALID_ID=-1;\nexport const CUSTOMER_INVALID_ID_ERROR=\"CUSTOMER_INVALID_ID_ERROR\";","import { CUSTOMER_ADDRESS_LOADED,CUSTOMER_LIST_LOADED } from \"../constants/action-types\";\n\n\nconst initialState = {\n  customerList: [],\n  customerAddress: {}\n};\n\nfunction rootReducer(state = initialState, action) {\n  \n  if (action.type === CUSTOMER_ADDRESS_LOADED) {\n\n    return Object.assign({}, state, {\n      customerAddress: action.payload\n    });\n  }\n  if (action.type === CUSTOMER_LIST_LOADED) {\n   return Object.assign({}, state, {\n      customerList: action.payload\n    });\n  }\n  return state;\n}\n\nexport default rootReducer;\n","\n  import { put, call, fork, takeEvery, all } from 'redux-saga/effects'\n  import axios from 'axios';\n  import * as actionType from \"../constants/action-types\";\n\n\n\n   export function* watchGetAllCustomers() {\n    yield takeEvery(actionType.GET_CUSTOMER_LIST, workerSagaCustomerList);\n   }\n\n  export function* watchGetAddressDetail(action) {\n   yield takeEvery(actionType.GET_CUSTOMER_ADDRESS, workerSagaAddress);\n   }\n   export function* workerSagaCustomerList() {\n   try {\n      const payload = yield call(getData);\n      yield put({ type: actionType.CUSTOMER_LIST_LOADED, payload });\n    } catch (e) {\n      yield put({ type: actionType.CUSTOMER_LIST_LOAD_ERROR, payload: e });\n    }\n  }\n\n\n  export function* workerSagaAddress(action) {\n   \n    /*if(action&&action.payload)\n      console.log(action.payload.selectedCustomer);*/\n    let id=action&&action.payload?action.payload.selectedCustomer:actionType.CUSTOMER_INVALID_ID;\n   \n    try {\n      const payload = yield call(getAddress,id);\n      yield put({ type: actionType.CUSTOMER_ADDRESS_LOADED, payload });\n    } catch (e) {\n       yield put({ type: actionType.CUSTOMER_ADDRESS_LOAD_ERROR, payload: e });\n    }\n  }\n\n\n  function getAddress(id){\n    if(id!==actionType.CUSTOMER_INVALID_ID){\n      return  axios.get('assets/samplejson/customer'+id+'.json').then(response=>response.data);\n       }\n    else {\n      throw new Error(actionType.CUSTOMER_INVALID_ID_ERROR);\n       }\n\n  }\n  function getData() {\n    return  axios.get('assets/samplejson/customerlist.json').then(response =>  response.data)\n  }\n\n\n  export default function* root() {\n    yield all([fork(watchGetAllCustomers), \n      fork(watchGetAddressDetail),\n      fork(workerSagaCustomerList),\n      fork(workerSagaAddress)])\n  }\n\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport createSagaMiddleware from \"redux-saga\";\nimport apiSaga from \"../sagas/api-saga\";\n\nconst initialiseSagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer,applyMiddleware(initialiseSagaMiddleware));\ninitialiseSagaMiddleware.run(apiSaga);\nexport default store;\n","import React from 'react';\nfunction AddressList(props){\n\tlet count=1;\n    let addressListItem=props.addressList.map((item)=>{\n\t \tcount=count+1;\n        return  (<li key={count+item.address}>{item.address}, {item.city}\n        \t, {item.state}, {item.country}</li> )\n        \t\n    });\n\n   return (<ul className=\"numbering\">{addressListItem}</ul>);\n\t}\n\nexport default AddressList;\n","import React from 'react';\nimport AddressList from './AddressList';\nimport { connect } from \"react-redux\";\n\n\nfunction mapStateToProps(state) {\n  return {\n    customerAddressDetail: state.customerAddress\n  };\n}\n\n\nconst CustomerAddressDetail = ({ customerAddressDetail }) => {\n\n\n    if (!(customerAddressDetail && customerAddressDetail.addressDetail))\n      return(<div/>);\n    return (\n      <div className=\"card\">\n      \n        <div className=\"header\">\n          Address \n        </div>\n        <div className=\"title\">\n        {customerAddressDetail.name}\n        </div>\n         <div>\n          <AddressList addressList={customerAddressDetail.addressDetail} />\n         </div>\n     \n      </div>\n    )\n  }\n  \n\nconst Address = connect(mapStateToProps)(CustomerAddressDetail);\n\nexport default Address;\n\n\n\n\n","import React, {Component} from 'react';\nimport CustomerAddressDetails from './CustomerAddressDetails'\nimport { connect } from \"react-redux\";\nimport { getCustomerList,getCustomerAddress} from \"../actions/index\";\n\n\nexport  class Customers extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  //function which is called the first time the component loads\n  componentDidMount() {\n    this.props.getCustomerList();\n    \n  }\n\n  \n\n  render() {\n    \n    if (!this.props.customerList.length)\n      return (\n        <p>Loading data</p>\n        );\n\n    return (\n    <div className=\"addmargin\">\n      <div className=\"col-1\" >\n        {\n\n          this.props.customerList.map(customer => <div className=\"card\"  key={customer.id+customer.name} \n          onClick={() => this.props.getCustomerAddress({selectedCustomer: customer.id})}>\n            <div className=\"header\">\n              {customer.name}\n            </div>\n            <div>\n              <p>Email: {customer.email}, mobile: {customer.phone}, \n              Age: {customer.age}, Sex: {customer.sex} </p>\n              \n            </div>\n          </div>)\n        }\n      </div>\n\n      <div className=\"col-2\">\n     \n     <CustomerAddressDetails/>\n      </div>\n      \n    </div>)\n  }\n\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    customerList: state.customerList\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  { getCustomerList,getCustomerAddress }\n)(Customers);\n","import { GET_CUSTOMER_LIST,GET_CUSTOMER_ADDRESS } from \"../constants/action-types\";\n\nexport function getCustomerList() {\n  return { type: GET_CUSTOMER_LIST};\n}\n\nexport function getCustomerAddress(id) {\n  return { type: GET_CUSTOMER_ADDRESS,payload:id};\n}\n\n\n\n\n","\nimport React, { Component } from 'react';\nimport Customers from \"./js/components/Customers\";\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './App.css';\n//import ErrorBoundary from './js/components/ErrorBoundary';\n//<Router basename={process.env.PUBLIC_URL}>-->\n\nclass App extends Component {\n  render() {\n    \n    return (\n\n      \n      <Router basename=\"https://saurabhbiswas.github.io/React-Redux-Saga\">\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <img src=\"./assets/images/conviva.png\" className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">ConViva Customer Portal </h1>\n        </header>\n       \n          <Switch>\n          \n                <Route exact path= \"/\" render={() => (\n                  <Redirect to=\"/customerlist\"/>\n                )}/>\n                 <Route exact path='/customerlist' component={Customers} />\n         \n          </Switch>\n         \n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./js/store/index\";\nimport App from \"./App.js\";\n\n\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n document.getElementById(\"root\")\n);\n"],"sourceRoot":""}