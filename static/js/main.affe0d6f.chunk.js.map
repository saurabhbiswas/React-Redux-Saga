{"version":3,"sources":["js/constants/action-types.js","js/reducers/index.js","js/sagas/api-saga.js","js/store/index.js","js/components/AddressList.js","js/components/CustomerAddressDetails.js","js/components/Customers.js","js/actions/index.js","App.js","index.js"],"names":["GET_CUSTOMER_ADDRESS","GET_CUSTOMER_LIST","CUSTOMER_ADDRESS_LOADED","CUSTOMER_LIST_LOADED","CUSTOMER_ADDRESS_LOAD_ERROR","CUSTOMER_LIST_LOAD_ERROR","CUSTOMER_INVALID_ID","CUSTOMER_INVALID_ID_ERROR","initialState","customerList","customerAddress","rootReducer","state","action","type","console","log","payload","Object","assign","watchGetAllCustomers","watchGetAddressDetail","workerSagaCustomerList","workerSagaAddress","root","takeEvery","actionType","call","getData","put","id","selectedCustomer","getAddress","axios","get","then","response","data","Error","all","fork","initialiseSagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","apiSaga","AddressList","props","count","addressListItem","addressList","map","item","key","address","city","country","className","Address","connect","customerAddressDetail","addressDetail","name","Customers","this","getCustomerList","length","customer","onClick","getCustomerAddress","email","phone","age","sex","CustomerAddressDetails","Component","App","basename","process","src","alt","exact","path","render","to","component","document","getElementById"],"mappings":"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","file":"static/js/main.affe0d6f.chunk.js","sourcesContent":["export const GET_CUSTOMER_ADDRESS = \"GET_CUSTOMER_ADDRESS\";\nexport const GET_CUSTOMER_LIST = \"GET_CUSTOMER_LIST\";\nexport const CUSTOMER_ADDRESS_LOADED = \"CUSTOMER_ADDRESS_LOADED\";\nexport const CUSTOMER_LIST_LOADED = \"CUSTOMER_LIST_LOADED\";\nexport const CUSTOMER_ADDRESS_LOAD_ERROR=\"CUSTOMER_ADDRESS_LOAD_ERROR\";\nexport const CUSTOMER_LIST_LOAD_ERROR=\"CUSTOMER_LIST_LOAD_ERROR\";\nexport const CUSTOMER_INVALID_ID=-1;\nexport const CUSTOMER_INVALID_ID_ERROR=\"CUSTOMER_INVALID_ID_ERROR\";","import { CUSTOMER_ADDRESS_LOADED,CUSTOMER_LIST_LOADED } from \"../constants/action-types\";\n\n\nconst initialState = {\n  customerList: [],\n  customerAddress: {}\n};\n\nfunction rootReducer(state = initialState, action) {\n  \n  if (action.type === CUSTOMER_ADDRESS_LOADED) {\n\n    console.log(\"rootReducer\",action.payload);\n    return Object.assign({}, state, {\n      customerAddress: action.payload\n    });\n  }\n  if (action.type === CUSTOMER_LIST_LOADED) {\n   return Object.assign({}, state, {\n      customerList: action.payload\n    });\n  }\n  return state;\n}\n\nexport default rootReducer;\n","\n  import { put, call, fork, takeEvery, all } from 'redux-saga/effects'\n  import axios from 'axios';\n  import * as actionType from \"../constants/action-types\";\n\n\n\n   export function* watchGetAllCustomers() {\n    yield takeEvery(actionType.GET_CUSTOMER_LIST, workerSagaCustomerList);\n   }\n\n  export function* watchGetAddressDetail(action) {\n   yield takeEvery(actionType.GET_CUSTOMER_ADDRESS, workerSagaAddress);\n   }\n   export function* workerSagaCustomerList() {\n   try {\n      const payload = yield call(getData);\n      yield put({ type: actionType.CUSTOMER_LIST_LOADED, payload });\n    } catch (e) {\n      yield put({ type: actionType.CUSTOMER_LIST_LOAD_ERROR, payload: e });\n    }\n  }\n\n\n  export function* workerSagaAddress(action) {\n   \n    /*if(action&&action.payload)\n      console.log(action.payload.selectedCustomer);*/\n    let id=action&&action.payload?action.payload.selectedCustomer:actionType.CUSTOMER_INVALID_ID;\n   \n    try {\n      const payload = yield call(getAddress,id);\n      yield put({ type: actionType.CUSTOMER_ADDRESS_LOADED, payload });\n    } catch (e) {\n       yield put({ type: actionType.CUSTOMER_ADDRESS_LOAD_ERROR, payload: e });\n    }\n  }\n\n\n  function getAddress(id){\n    if(id!==actionType.CUSTOMER_INVALID_ID){\n      return  axios.get('assets/samplejson/customer'+id+'.json').then(response=>response.data);\n       }\n    else {\n      throw new Error(actionType.CUSTOMER_INVALID_ID_ERROR);\n       }\n\n  }\n  function getData() {\n    return  axios.get('assets/samplejson/customerlist.json').then(response =>  response.data)\n  }\n\n\n  export default function* root() {\n    yield all([fork(watchGetAllCustomers), \n      fork(watchGetAddressDetail),\n      fork(workerSagaCustomerList),\n      fork(workerSagaAddress)])\n  }\n\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport createSagaMiddleware from \"redux-saga\";\nimport apiSaga from \"../sagas/api-saga\";\n\nconst initialiseSagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer,applyMiddleware(initialiseSagaMiddleware));\ninitialiseSagaMiddleware.run(apiSaga);\nexport default store;\n","import React from 'react';\nfunction AddressList(props){\n\tlet count=1;\n    let addressListItem=props.addressList.map((item)=>{\n\t \tcount=count+1;\n        return  (<li key={count+item.address}>{item.address}, {item.city}\n        \t, {item.state}, {item.country}</li> )\n        \t\n    });\n\n   return (<ul className=\"numbering\">{addressListItem}</ul>);\n\t}\n\nexport default AddressList;\n","import React from 'react';\nimport AddressList from './AddressList';\nimport { connect } from \"react-redux\";\n\n\nfunction mapStateToProps(state) {\n  return {\n    customerAddressDetail: state.customerAddress\n  };\n}\n\n\nconst CustomerAddressDetail = ({ customerAddressDetail }) => {\n\n\n    if (!(customerAddressDetail && customerAddressDetail.addressDetail))\n      return(<div/>);\n    return (\n      <div className=\"card\">\n      \n        <div className=\"header\">\n          Address \n        </div>\n        <div className=\"title\">\n        {customerAddressDetail.name}\n        </div>\n         <div>\n          <AddressList addressList={customerAddressDetail.addressDetail} />\n         </div>\n     \n      </div>\n    )\n  }\n  \n\nconst Address = connect(mapStateToProps)(CustomerAddressDetail);\n\nexport default Address;\n\n\n\n\n","import React, {Component} from 'react';\nimport CustomerAddressDetails from './CustomerAddressDetails'\nimport { connect } from \"react-redux\";\nimport { getCustomerList,getCustomerAddress} from \"../actions/index\";\n\n\nexport  class Customers extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  //function which is called the first time the component loads\n  componentDidMount() {\n    this.props.getCustomerList();\n    \n  }\n\n  \n\n  render() {\n    console.log(\"customer.js\",this.props.customerList);\n    if (!this.props.customerList.length)\n      return (\n        <p>Loading data</p>\n        );\n\n    return (\n    <div className=\"addmargin\">\n      <div className=\"col-1\" >\n        {\n\n          this.props.customerList.map(customer => <div className=\"card\"  key={customer.id+customer.name} \n          onClick={() => this.props.getCustomerAddress({selectedCustomer: customer.id})}>\n            <div className=\"header\">\n              {customer.name}\n            </div>\n            <div>\n              <p>Email: {customer.email}, mobile: {customer.phone}, \n              Age: {customer.age}, Sex: {customer.sex} </p>\n              \n            </div>\n          </div>)\n        }\n      </div>\n\n      <div className=\"col-2\">\n     \n     <CustomerAddressDetails/>\n      </div>\n      \n    </div>)\n  }\n\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    customerList: state.customerList\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  { getCustomerList,getCustomerAddress }\n)(Customers);\n","import { GET_CUSTOMER_LIST,GET_CUSTOMER_ADDRESS } from \"../constants/action-types\";\n\nexport function getCustomerList() {\n  return { type: GET_CUSTOMER_LIST};\n}\n\nexport function getCustomerAddress(id) {\n  return { type: GET_CUSTOMER_ADDRESS,payload:id};\n}\n\n\n\n\n","\nimport React, { Component } from 'react';\nimport Customers from \"./js/components/Customers\";\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './App.css';\n//import ErrorBoundary from './js/components/ErrorBoundary';\n\nclass App extends Component {\n  render() {\n    \n    return (\n\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <img src=\"./assets/images/conviva.png\" className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">ConViva Customer Portal </h1>\n        </header>\n       \n          <Switch>\n          \n                <Route exact path= \"/\" render={() => (\n                  <Redirect to=\"/customerlist\"/>\n                )}/>\n                 <Route exact path='/customerlist' component={Customers} />\n         \n          </Switch>\n         \n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./js/store/index\";\nimport App from \"./App.js\";\n\n\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n document.getElementById(\"root\")\n);\n"],"sourceRoot":""}